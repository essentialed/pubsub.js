{"name":"Pubsub.js","tagline":"PubSub in JavaScript with topics, subtopics, and messages.","body":"pubsub.js\r\n=========\r\n\r\n> The Publish/Subscribe pattern uses a topic/event channel which sits between the objects wishing to receive notifications (subscribers) and the object firing the event (the publisher). This event system allows code to define application specific events which can pass custom arguments containing values needed by the subscriber. The idea here is to avoid dependencies between the subscriber and publisher.\r\n\r\n[Learning JavaScript Design Patterns by Addy Osmani](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript)\r\n\r\n## Features\r\n* No dependencies\r\n* Small & Fast\r\n* Topic &amp; Message subscriptions\r\n* Subtopics\r\n\r\n## Syntax\r\n\r\nYou can start using PubSub right away or you can create new instances from it.\r\n\r\n```javascript\r\nPubSub.subscribe('topic', function(subscription, message) {\r\n    // the subscription argument is an object with the following properties\r\n    // @topic {String} the topic that we are listening to, in this case \"topic\"\r\n    // @message {Anything} the message we were listening for, if any, in this case undefined\r\n    // @token {String} the unique ID for this subscription, used for unsubscribing\r\n\r\n    console.log('\"topic\" was published with message \"' + message + '\"');\r\n});\r\n```\r\nAnd then..\r\n\r\n```javascript\r\nPubSub.publish('topic'); // => \"topic\" was published with message \"undefined\"\r\n\r\nPubSub.publish('topic', 'a message'); // => \"topic\" was published with message \"a message\"\r\n```\r\n\r\nCreating a new PubSub instance for use, let's say, with a specific module.\r\nFunctionality and syntax stay the same.\r\n\r\n```javascript\r\nMyModule.PubSub = new PubSub();\r\n```\r\n\r\nPassing some options in our PubSub:\r\n\r\n```javascript\r\nEvents = new PubSub({\r\n    'subtopics': true, // true is the default value\r\n    'subtopic_marker': '--' // the default is \":\"\r\n});\r\n\r\nEvents.subscribe('topic', function(subscription, message) {\r\n    console.log(subscription.topic + ' was published: ' + message);\r\n});\r\n```\r\n\r\nAnd then..\r\n\r\n```javascript\r\nEvents.publish('topic--childtopic--extradeeptopic', 'some message');\r\n// => \"topic was published: some message\"\r\n\r\nEvents.publish('topic--childtopic', 'some message');\r\n// => \"topic was published: some message\"\r\n\r\nEvents.publish('topic', 'some message');\r\n// => \"topic was published: some message\"\r\n```\r\n\r\nSubtopics allow you to in a way \"bubble\" published messages so that you can\r\ndo things like this:\r\n\r\n```javascript\r\nPubSub.subscribe('change', function(subscription, change) {\r\n    console.log('Something has changed from '  + change.from + ' to ' + change.to );\r\n});\r\n\r\nPubSub.subscribe('change:name', function(subscription, change) {\r\n    console.log('My name has changed from ' + change.from + ' to ' + change.to );\r\n});\r\n\r\nPubSub.publish('change:name', {\r\n    'from': 'A',\r\n    'to': 'B'\r\n});\r\n\r\n// => My name has changed from A to B\r\n// => Something has changed from A to B\r\n```\r\n\r\n\r\n### Unsubscribing\r\n\r\n#### By token (1)\r\n\r\n```javascript\r\nvar token = PubSub.subscribe('click', function(subscription, message){\r\n    console.log('Another click');\r\n});\r\n\r\nPubSub.publish('click');\r\n\r\nPubSub.unsubscribe(token);\r\n```\r\n\r\n#### By token (2)\r\n\r\n```javascript\r\nPubSub.subscribe('click', function(subscription, message){\r\n    console.log('Another click');\r\n    PubSub.unsubscribe(subscription.token);\r\n});\r\n\r\nPubSub.publish('click');\r\n```\r\n\r\n#### By topic\r\n\r\n```javascript\r\nPubSub.remove('click'); // Remove all click topics\r\n```\r\n\r\n### Topic &amp; Messages\r\n\r\nYou can subscribe to a topic &amp; message combination, when you only care about a specific message.\r\n\r\n```javascript\r\nPubSub.subscribe('change', function(subscription, message, options){\r\n    console.log('Something has changed!', message, options);\r\n});\r\n\r\nPubSub.subscribe('change', 'name', function(subscription, message, opts){\r\n    console.log('My', message.toUpperCase(), 'has changed!', opts);\r\n    // subscription.message === message === name\r\n});\r\n\r\nPubSub.publish('change', 'name', {\r\n    'from': 'A',\r\n    'to': 'B'\r\n});\r\n\r\n// => 'My NAME has changed!' { 'from': 'A', 'to': 'B' }\r\n// => 'Something has changed!' name { 'from': 'A', 'to': 'B' }\r\n```\r\n\r\n\r\n### Subtopics\r\n\r\nSubtopics provide a similar functionality as topic-message combination, in that they provide another level of specifity when subscribing and publishing.\r\n\r\nIn both cases the publish event bubbles up to the parent topic.\r\n\r\n```javascript\r\nPubSub.subscribe('change', function(subscription, message){\r\n    console.log('Something has changed!', message);\r\n});\r\n\r\nPubSub.subscribe('change:name', function(subscription, message){\r\n    console.log('My name has changed!', message);\r\n});\r\n\r\nPubSub.publish('change:name', {\r\n    'from': 'A',\r\n    'to': 'B'\r\n});\r\n\r\n// => 'My name has changed!' { 'from': 'A', 'to': 'B' }\r\n// => 'Something has changed!' { 'from': 'A', 'to': 'B' }\r\n```\r\n\r\n## Other PubSub JS libraries\r\n* https://gist.github.com/661855\r\n* https://github.com/mroderick/PubSubJS\r\n* https://github.com/phiggins42/bloody-jquery-plugins/blob/master/pubsub.js\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}